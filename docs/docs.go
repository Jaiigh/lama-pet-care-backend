// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/check_token": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates the JWT token passed in the Authorization header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Check JWT token validity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorization Token.",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/create_admin": {
            "post": {
                "description": "create new admin user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "create admin",
                "parameters": [
                    {
                        "description": "Admin user data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreatedUserModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successful",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseModel"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role of the user",
                        "name": "role",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "email and password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.LoginUserModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successful",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseModel"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "401": {
                        "description": "Cannot login user: invalid password or email",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "403": {
                        "description": "Invalid role",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register new user except admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role of the user except admin",
                        "name": "role",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CreatedUserModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successful",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseModel"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "403": {
                        "description": "Invalid role",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "find user by id and role from JWT token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "find user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successful",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorization Token.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Invalid role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "delete user by id and role from JWT token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "delete user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successful",
                        "schema": {
                            "$ref": "#/definitions/entities.ResponseModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorization Token.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Invalid role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "delete user by id and role from JWT token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "delete user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "update user data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateUserModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successful",
                        "schema": {
                            "$ref": "#/definitions/entities.UserDataModel"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorization Token.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Invalid role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.CreatedUserModel": {
            "type": "object",
            "required": [
                "address",
                "birth_date",
                "email",
                "name",
                "password",
                "telephone_number"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "license_number": {
                    "description": "doctor only",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "specialization": {
                    "description": "caretaker only",
                    "type": "string"
                },
                "telephone_number": {
                    "type": "string"
                }
            }
        },
        "entities.LoginUserModel": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "description": "for response",
                    "type": "string"
                },
                "user_id": {
                    "description": "for response",
                    "type": "string"
                }
            }
        },
        "entities.ResponseMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "entities.ResponseModel": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "entities.UpdateUserModel": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "end_work_time": {
                    "description": "doctor/caretaker only",
                    "type": "string"
                },
                "license_number": {
                    "description": "doctor only",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "rating": {
                    "description": "caretaker only",
                    "type": "number"
                },
                "specialization": {
                    "description": "caretaker only",
                    "type": "string"
                },
                "start_date": {
                    "description": "doctor only",
                    "type": "string"
                },
                "start_work_time": {
                    "description": "doctor/caretaker only",
                    "type": "string"
                },
                "telephone_number": {
                    "type": "string"
                },
                "total_spending": {
                    "description": "owner only",
                    "type": "number"
                }
            }
        },
        "entities.UserDataModel": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "end_work_time": {
                    "type": "string"
                },
                "license_number": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "specialization": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "start_work_time": {
                    "type": "string"
                },
                "telephone_number": {
                    "type": "string"
                },
                "total_spending": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and then your JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "127.0.0.1:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "LAMA Backend API",
	Description:      "this is a backend REST API server for LAMA project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
